import ipaddress
import subprocess
import requests
from concurrent.futures import ThreadPoolExecutor, as_completed
import re

success_ips = []
failed_ips = []



def execute_command(ip):
    # Replace this with the command you want to execute
   url = f"https://{ip}/webui/logoutconfirm.html"
   data = {"logon_hash":"1"}
   try:
        response = requests.post(url, data=data, timeout=2, verify=False)
        if response.status_code == 200:
            print(f"IP: {ip} - Status: {response.status_code}")
# Check if the response content is a supicious length
            if len(response.text) < 32:
                print(f"IP: {ip} - Response is a potentially suspicious: {response.text}")
                success_ips.append(ip)
            else:
                print(f"IP: {ip} - Response is to long.")
                failed_ips.append(ip)
        else:
            print(f"IP: {ip} - Status: {response.status_code}")
   except requests.RequestException as e:
        print(f"IP: {ip} - Error: no reply")

def main():
    # Input subnet in CIDR notation (e.g., 172.16.0.0/24)
    subnet_input = input("Enter the subnet (CIDR notation): ")
    try:
        # Create an IPv4Network object from the input subnet
        subnet = ipaddress.IPv4Network(subnet_input, strict=False)
        # Use a ThreadPoolExecutor to run execute_command concurrently
        with ThreadPoolExecutor(max_workers=15) as executor:
            # Submit tasks for each IP address in the subnet
            future_to_ip = {executor.submit(execute_command, str(ip)): ip for ip in subnet.hosts()}

            # Wait for all tasks to complete
            for future in as_completed(future_to_ip):
                ip = future_to_ip[future]
                try:
                    future.result()
                except Exception as e:
                    print(f"IP: {ip} - Exception: {e}")
    except ValueError as e:
        print(f"Error: {e}")
        print("Please enter a valid subnet in CIDR notation.")
    print("\nIPs with status code 200, suspicious length, should be checked:")
    print(success_ips)
    print("\nIPs with status code 200, but no IOC:")
    print(failed_ips)

if __name__ == "__main__":
    main()
