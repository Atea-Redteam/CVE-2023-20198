import ipaddress
import requests
from concurrent.futures import ThreadPoolExecutor, as_completed
import re

success_ips = []
failed_ips = []

# checking for the original IOC from https://blog.talosintelligence.com/active-exploitation-of-cisco-ios-xe-software/
# This includes the new IOC from Talos with the Authorization header to check if a known implant is used. 
# Then checking if the implant has been upgraded as explained by Fox-IT https://github.com/fox-it/cisco-ios-xe-implant-detection


def execute_command(ip):
    # URL to check. Change to https/http or any port needed:
   url = f"https://{ip}/webui/logoutconfirm.html?logon_hash=1"
   data = {"logon_hash":"1"}
   upgraded_url = f"https://{ip}/%25"
   headers = {
       "Authorization" : "0ff4fbf0ecffa77ce8d3852a29263e263838e9bb",
       "User-Agent":"Atea Red Team CVE-2023-20198 checkscript"
   }
   try:
        response = requests.post(url, data=data, timeout=2, headers=headers, verify=False)
        if response.status_code == 200:
            print(f"[+]IP: {ip} - Status: {response.status_code}")
# Check if the response content is a supicious length
            if len(response.text) < 32:
                print(f"[!]IP: {ip} - Response is a potentially suspicious: {response.text}")
                success_ips.append(ip)
            else:
                print(f"[-]IP: {ip} - Response is to long.")
                # checking if the implant might have been upgraded
                print("[+]checking if implant is upgraded")
                response2 = requests.get(upgraded_url, timeout=2, headers=headers, verify=False)
                # IOC from Fox-IT
                if "<h1>404 Not Found</h1>" in response2.text:
                    success_ips.append(ip)
                else:
                    failed_ips.append(ip)
        else:
            print(f"[-]IP: {ip} - Status: {response.status_code}")
   except requests.RequestException as e:
        print(f"[-]IP: {ip} - Error: no reply")


def main():
    # Input subnet in CIDR notation (e.g., 172.16.0.0/24)
    subnet_input = input("[-]Enter the subnet (CIDR notation): ")
    try:
        # Create an IPv4Network object from the input subnet
        subnet = ipaddress.IPv4Network(subnet_input, strict=False)
        # Use a ThreadPoolExecutor to run execute_command concurrently
        with ThreadPoolExecutor(max_workers=15) as executor:
            # Submit tasks for each IP address in the subnet
            future_to_ip = {executor.submit(execute_command, str(ip)): ip for ip in subnet.hosts()}

            # Wait for all tasks to complete
            for future in as_completed(future_to_ip):
                ip = future_to_ip[future]
                try:
                    future.result()
                except Exception as e:
                    print(f"IP: {ip} - Exception: {e}")
    except ValueError as e:
        print(f"Error: {e}")
        print("[*]Please enter a valid subnet in CIDR notation.")
    print("\n[!]IPs with status code 200 and either suspicious length or possible upgraded implant.")
    print(success_ips)
    print("\n[+]IPs with status code 200, but no IOC:")
    print(failed_ips)

if __name__ == "__main__":
    main()
